diff --git a/Data_preprocessing_and_model_building (part I).ipynb b/Data_preprocessing_and_model_building (part I).ipynb
index 3ca58bd..40ef6ad 100644
--- a/Data_preprocessing_and_model_building (part I).ipynb	
+++ b/Data_preprocessing_and_model_building (part I).ipynb	
@@ -26,6 +26,7 @@
     "from sklearn.utils import class_weight\n",
     "from sklearn.pipeline import Pipeline\n",
     "from sklearn.svm import LinearSVC\n",
+    "from skmultilearn.problem_transform import LabelPowerset\n",
     "from nltk.corpus import stopwords\n",
     "from ast import literal_eval\n",
     "from typing import Union\n",
@@ -71,7 +72,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 2,
    "metadata": {},
    "outputs": [
     {
@@ -80,7 +81,7 @@
        "((26152,), (6538,))"
       ]
      },
-     "execution_count": 3,
+     "execution_count": 2,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -94,7 +95,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -119,7 +120,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -129,7 +130,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [
     {
@@ -148,7 +149,7 @@
        "      dtype='<U185')"
       ]
      },
-     "execution_count": 6,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -159,7 +160,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [
     {
@@ -171,7 +172,7 @@
        "       \"['cs.LG', 'stat.ML']\"], dtype=object)"
       ]
      },
-     "execution_count": 7,
+     "execution_count": 6,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -182,7 +183,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
@@ -196,7 +197,7 @@
        "      dtype=object)"
       ]
      },
-     "execution_count": 8,
+     "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -211,7 +212,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [
     {
@@ -239,7 +240,7 @@
        "        0, 0, 0, 0, 0, 0, 0, 0, 1, 0]])"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 8,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -250,7 +251,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 9,
    "metadata": {},
    "outputs": [
     {
@@ -278,7 +279,7 @@
        "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])"
       ]
      },
-     "execution_count": 10,
+     "execution_count": 9,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -290,7 +291,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 10,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -299,14 +300,14 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 11,
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/html": [
        "\n",
-       "        Notebook configured with <a href=\"https://wandb.com\" target=\"_blank\">W&B</a>. You can <a href=\"https://app.wandb.ai/sayakpaul/data-preprocessing-and-model-building-1/runs/tpgopfvq?apiKey=ab6c21fa98b79790d8c7a9d0a0844b7a1ddaa4e2\" target=\"_blank\">open</a> the run page, or call <code>%%wandb</code>\n",
+       "        Notebook configured with <a href=\"https://wandb.com\" target=\"_blank\">W&B</a>. You can <a href=\"https://app.wandb.ai/sayakpaul/data-preprocessing-and-model-building-1/runs/j39svph9?apiKey=ab6c21fa98b79790d8c7a9d0a0844b7a1ddaa4e2\" target=\"_blank\">open</a> the run page, or call <code>%%wandb</code>\n",
        "        in a cell containing your training loop to display live results.  Learn more in our <a href=\"https://docs.wandb.com/docs/integrations/jupyter.html\" target=\"_blank\">docs</a>.\n",
        "    "
       ],
@@ -320,10 +321,10 @@
     {
      "data": {
       "text/plain": [
-       "W&B Run: https://app.wandb.ai/sayakpaul/data-preprocessing-and-model-building-1/runs/tpgopfvq?apiKey=ab6c21fa98b79790d8c7a9d0a0844b7a1ddaa4e2"
+       "W&B Run: https://app.wandb.ai/sayakpaul/data-preprocessing-and-model-building-1/runs/j39svph9?apiKey=ab6c21fa98b79790d8c7a9d0a0844b7a1ddaa4e2"
       ]
      },
-     "execution_count": 12,
+     "execution_count": 11,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -334,7 +335,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": 12,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -443,6 +444,54 @@
     "\n",
     "print(train_eval_pipeline(lr_pipeline, (X_train, y_train_binarized), (X_test, y_test_binarized)))"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 13,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/miniconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
+      "  FutureWarning)\n",
+      "/miniconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:460: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning.\n",
+      "  \"this warning.\", FutureWarning)\n",
+      "wandb: Wandb version 0.8.12 is available!  To upgrade, please run:\n",
+      "wandb:  $ pip install wandb --upgrade\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Accuracy score: 52.53900275313551%, model trained in 15.153378963470459 secs\n"
+     ]
+    }
+   ],
+   "source": [
+    "lr_pipeline = Pipeline([\n",
+    "                ('tfidf', TfidfVectorizer(stop_words=stop_words)),\n",
+    "                ('clf', LabelPowerset(LogisticRegression())),\n",
+    "            ])\n",
+    "\n",
+    "print(train_eval_pipeline(lr_pipeline, (X_train, y_train_binarized), (X_test, y_test_binarized)))"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "svc_pipeline = Pipeline([\n",
+    "                ('tfidf', TfidfVectorizer(stop_words=stop_words)),\n",
+    "                ('clf', OneVsRestClassifier(LinearSVC(), n_jobs=1)),\n",
+    "            ])\n",
+    "\n",
+    "print(train_eval_pipeline(svc_pipeline, (X_train, y_train_binarized), (X_test, y_test_binarized)))"
+   ]
   }
  ],
  "metadata": {
diff --git a/Data_preprocessing_and_model_building_(part_II).ipynb b/Data_preprocessing_and_model_building_(part_II).ipynb
deleted file mode 100644
index 12d0878..0000000
--- a/Data_preprocessing_and_model_building_(part_II).ipynb
+++ /dev/null
@@ -1,1031 +0,0 @@
-{
-  "nbformat": 4,
-  "nbformat_minor": 0,
-  "metadata": {
-    "accelerator": "GPU",
-    "colab": {
-      "name": "Data_preprocessing_and_model_building (part II).ipynb",
-      "provenance": [],
-      "collapsed_sections": [],
-      "include_colab_link": true
-    },
-    "kernelspec": {
-      "name": "python3",
-      "display_name": "Python 3"
-    },
-    "language_info": {
-      "codemirror_mode": {
-        "name": "ipython",
-        "version": 3
-      },
-      "file_extension": ".py",
-      "mimetype": "text/x-python",
-      "name": "python",
-      "nbconvert_exporter": "python",
-      "pygments_lexer": "ipython3",
-      "version": "3.6.5"
-    }
-  },
-  "cells": [
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "id": "view-in-github",
-        "colab_type": "text"
-      },
-      "source": [
-        "<a href=\"https://colab.research.google.com/github/sayakpaul/Generating-categories-from-arXiv-paper-titles/blob/master/Data_preprocessing_and_model_building_(part_II).ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "id": "b5uwl-25UbWc",
-        "colab_type": "text"
-      },
-      "source": [
-        "**To be included**:\n",
-        "- Try the other models (LSTM, GRU, Bidrectional LSTM)\n",
-        "- More modularity\n",
-        "- Comments\n",
-        "- References"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "qwzIXITv2gRk",
-        "colab": {}
-      },
-      "source": [
-        "!pip install tensorflow-gpu==2.0.0-rc1"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "sy343WkVLLwz",
-        "colab_type": "code",
-        "colab": {}
-      },
-      "source": [
-        "!pip install wandb"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "avyoiF6sLNbQ",
-        "colab_type": "code",
-        "colab": {}
-      },
-      "source": [
-        "!wandb login"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "Ygozgua-PLll",
-        "colab": {}
-      },
-      "source": [
-        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
-        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
-        "from tensorflow.keras.models import Sequential\n",
-        "from tensorflow.keras.layers import *\n",
-        "from tensorflow.keras.callbacks import *\n",
-        "from sklearn.preprocessing import MultiLabelBinarizer\n",
-        "from sklearn.utils import class_weight\n",
-        "from wandb.keras import WandbCallback\n",
-        "from ast import literal_eval\n",
-        "from typing import Union\n",
-        "import matplotlib.pyplot as plt\n",
-        "import tensorflow as tf\n",
-        "import numpy as np\n",
-        "import wandb\n",
-        "import nltk\n",
-        "import time\n",
-        "import re\n",
-        "import io"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "WybjOls3WkoO",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 68
-        },
-        "outputId": "f4cbe064-6d86-4ae4-f476-9df0b8eba18d"
-      },
-      "source": [
-        "%matplotlib inline\n",
-        "nltk.download('stopwords')"
-      ],
-      "execution_count": 3,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "text": [
-            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
-            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
-          ],
-          "name": "stdout"
-        },
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "True"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 3
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "EBXnuyRxMc1U",
-        "colab_type": "code",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 51
-        },
-        "outputId": "e358a339-e02f-4a0e-bb51-86ea361a57df"
-      },
-      "source": [
-        "wandb.init()\n",
-        "config = wandb.config\n",
-        "\n",
-        "config.filter_length = 300\n",
-        "config.max_words = 3000\n",
-        "config.maxlen = 300\n",
-        "config.batch_size = 32\n",
-        "config.embedding_dims = 30\n",
-        "config.filters = 10\n",
-        "config.kernel_size = 3\n",
-        "config.hidden_dims = 10\n",
-        "config.epochs = 10"
-      ],
-      "execution_count": 4,
-      "outputs": [
-        {
-          "output_type": "display_data",
-          "data": {
-            "text/html": [
-              "\n",
-              "            Notebook configured with <a href=\"https://wandb.com\" target=\"_blank\">W&B</a>. You can <a href=\"https://app.wandb.ai/sayakpaul/uncategorized/runs/rl6jb5kg\" target=\"_blank\">open</a> the run page, or call <code>%%wandb</code>\n",
-              "            in a cell containing your training loop to display live results.  Learn more in our <a href=\"https://docs.wandb.com/docs/integrations/jupyter.html\" target=\"_blank\">docs</a>.\n",
-              "        "
-            ],
-            "text/plain": [
-              "<IPython.core.display.HTML object>"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          }
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "1XcxUCjOPatK",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 34
-        },
-        "outputId": "7861aabc-87ff-460d-8632-ed28b4d2a216"
-      },
-      "source": [
-        "X_train, y_train = np.load('data/X_train.npy', allow_pickle=True), np.load('data/y_train.npy', allow_pickle=True)\n",
-        "X_test, y_test = np.load('data/X_test.npy', allow_pickle=True), np.load('data/y_test.npy', allow_pickle=True)\n",
-        "\n",
-        "X_train.shape, X_test.shape"
-      ],
-      "execution_count": 5,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "((26152,), (6538,))"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 5
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "J27Ns750WBEO",
-        "colab": {}
-      },
-      "source": [
-        "wpt = nltk.WordPunctTokenizer()\n",
-        "stop_words = nltk.corpus.stopwords.words('english')\n",
-        "\n",
-        "def clean_title(title):\n",
-        "    # lower case and remove special characters\\whitespaces\n",
-        "    title = re.sub(r'[^a-zA-Z\\s]', '', title, re.I|re.A)\n",
-        "    title = title.lower()\n",
-        "    title = title.strip()\n",
-        "    # tokenize document\n",
-        "    tokens = wpt.tokenize(title)\n",
-        "    # filter stopwords out of document\n",
-        "    filtered_tokens = [token for token in tokens if token not in stop_words]\n",
-        "    # re-create document from filtered tokens\n",
-        "    title = ' '.join(filtered_tokens)\n",
-        "    return title\n",
-        "\n",
-        "clean_title = np.vectorize(clean_title)"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "OorZpDdTWmYt",
-        "colab": {}
-      },
-      "source": [
-        "X_train = clean_title(X_train)\n",
-        "X_test = clean_title(X_test)"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "A3pYGjRIW2-p",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 204
-        },
-        "outputId": "fc3bf742-6b6b-4e35-f7ff-d807a8d70f4a"
-      },
-      "source": [
-        "X_train[:10]"
-      ],
-      "execution_count": 8,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "array(['deblurgan blind motion deblurring using conditional adversarial networks',\n",
-              "       'improve satsolving machine learning',\n",
-              "       'training adversarial discriminators crosschannel abnormal event detection crowds',\n",
-              "       'collective stability networks winnertakeall circuits',\n",
-              "       'sample complexity episodic fixedhorizon reinforcement learning',\n",
-              "       'visualizing textual models intext wordaspixel highlighting',\n",
-              "       'prophit causal inverse classification multiple continuously valued treatment policies',\n",
-              "       'sequential dual deep learning shape texture features sketch recognition',\n",
-              "       'notes using determinantal point processes clustering applications text clustering',\n",
-              "       'exactly robust kernel principal component analysis'],\n",
-              "      dtype='<U185')"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 8
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "tL1jrd9RQgem",
-        "colab": {}
-      },
-      "source": [
-        "tokenizer = Tokenizer(num_words=config.max_words, lower=True)\n",
-        "tokenizer.fit_on_texts(X_train)"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "Ea6TpD6dR-ny",
-        "colab": {}
-      },
-      "source": [
-        "def get_features(text_sequence):\n",
-        "    \"\"\"\n",
-        "    Converts a text sequence to its tokenized version\n",
-        "    and then returns it with padding added \n",
-        "    \"\"\"\n",
-        "    sequences = tokenizer.texts_to_sequences(text_sequence)\n",
-        "    return pad_sequences(sequences, maxlen=config.maxlen)\n",
-        "\n",
-        "train_features = get_features(X_train)\n",
-        "test_features = get_features(X_test)"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "iBXk7njRStis",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 34
-        },
-        "outputId": "a8adb95f-0f4f-4647-bd98-e0b825db1696"
-      },
-      "source": [
-        "train_features.shape, test_features.shape"
-      ],
-      "execution_count": 11,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "((26152, 300), (6538, 300))"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 11
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "u9j_F5rJBNSB",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 85
-        },
-        "outputId": "46132524-a69b-4684-e607-f407997ad35a"
-      },
-      "source": [
-        "y_train[:10]"
-      ],
-      "execution_count": 12,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "array([\"['cs.CV']\", \"['cs.AI', 'cs.LO']\", \"['cs.CV']\", \"['cs.NE']\",\n",
-              "       \"['stat.ML', 'cs.AI', 'cs.LG']\", \"['stat.ML', 'cs.CL', 'cs.LG']\",\n",
-              "       \"['cs.LG', 'stat.ML']\", \"['cs.CV']\", \"['cs.LG']\",\n",
-              "       \"['cs.LG', 'stat.ML']\"], dtype=object)"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 12
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "mK_qDM4GAkaH",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 119
-        },
-        "outputId": "13bf060d-bbb6-4f5f-ed2c-58e922c69fa9"
-      },
-      "source": [
-        "# Label binarization\n",
-        "list_preprocessed = [literal_eval(i) for i in y_train]\n",
-        "mlb = MultiLabelBinarizer()\n",
-        "y_train_binarized = mlb.fit_transform(list_preprocessed)\n",
-        "mlb.classes_"
-      ],
-      "execution_count": 13,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "array(['cs.AI', 'cs.CC', 'cs.CE', 'cs.CL', 'cs.CR', 'cs.CV', 'cs.CY',\n",
-              "       'cs.DB', 'cs.DS', 'cs.GR', 'cs.GT', 'cs.HC', 'cs.IR', 'cs.IT',\n",
-              "       'cs.LG', 'cs.LO', 'cs.MA', 'cs.MM', 'cs.NE', 'cs.PL', 'cs.RO',\n",
-              "       'cs.SD', 'cs.SE', 'cs.SI', 'math.IT', 'math.OC', 'math.ST',\n",
-              "       'stat.AP', 'stat.CO', 'stat.ME', 'stat.ML', 'stat.TH'],\n",
-              "      dtype=object)"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 13
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "2inwMYlfUbXE",
-        "colab_type": "code",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 357
-        },
-        "outputId": "cc86fc6f-0930-4c13-fb93-c3520cc706c4"
-      },
-      "source": [
-        "y_train_binarized[:10]"
-      ],
-      "execution_count": 14,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "array([[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n",
-              "       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n",
-              "       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n",
-              "       [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 1, 0]])"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 14
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "X_gGkJwDUbXG",
-        "colab_type": "code",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 34
-        },
-        "outputId": "4c8a943b-5c5e-4197-c219-87053165ca33"
-      },
-      "source": [
-        "y_train_binarized[0].shape"
-      ],
-      "execution_count": 15,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "(32,)"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 15
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "OXbORM4yUbXJ",
-        "colab_type": "code",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 357
-        },
-        "outputId": "964ccf4a-c6a9-4f84-8db8-f832f4a577f6"
-      },
-      "source": [
-        "y_test_binarized = mlb.transform([literal_eval(i) for i in y_test])\n",
-        "y_test_binarized[:10]"
-      ],
-      "execution_count": 16,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 1, 0, 0, 1, 0],\n",
-              "       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n",
-              "       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
-              "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 16
-        }
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "colab_type": "text",
-        "id": "edo3VaX0PH9A"
-      },
-      "source": [
-        "Determine the class weights. "
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "XSkE7fiSUbXM",
-        "colab_type": "code",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 51
-        },
-        "outputId": "00e33426-f25e-4685-c2ba-971fa551a12b"
-      },
-      "source": [
-        "class_weight = class_weight.compute_sample_weight('balanced', y_train)\n",
-        "class_weight"
-      ],
-      "execution_count": 17,
-      "outputs": [
-        {
-          "output_type": "execute_result",
-          "data": {
-            "text/plain": [
-              "array([0.03675098, 1.08066116, 0.03675098, ..., 0.03675098, 4.84296296,\n",
-              "       0.08631023])"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          },
-          "execution_count": 17
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "LncxEnWK9MGo",
-        "colab": {}
-      },
-      "source": [
-        "def get_a_cnn_model() -> tf.keras.models.Sequential:\n",
-        "    model = Sequential()\n",
-        "    model.add(Embedding(config.max_words, config.embedding_dims, \n",
-        "        input_length=config.maxlen))\n",
-        "    model.add(Dropout(0.1))\n",
-        "    model.add(Conv1D(config.filter_length, config.kernel_size, \n",
-        "        padding='valid', activation='relu', strides=1))\n",
-        "    model.add(GlobalMaxPool1D())\n",
-        "    model.add(Dense(32, activation='sigmoid'))\n",
-        "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['categorical_accuracy'])\n",
-        "    return model"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "c-nfDxTvUbXT",
-        "colab_type": "code",
-        "colab": {}
-      },
-      "source": [
-        "def get_a_sequential_model(sequential_layer:Union[tf.keras.layers.LSTM, tf.keras.layers.GRU], \n",
-        "        bidirectional:bool) -> tf.keras.models.Sequential:\n",
-        "    model = Sequential()\n",
-        "    model.add(Embedding(max_words, 20, input_length=maxlen))\n",
-        "    if bidirectional:\n",
-        "        model.add(Bidirectional(sequential_layer(10, activation=\"sigmoid\")))\n",
-        "    else:\n",
-        "        model.add(sequential_layer(10, activation=\"sigmoid\"))\n",
-        "    model.add(Dense(32, activation='sigmoid'))\n",
-        "    model.compile(loss='binary_crossentropy',\n",
-        "                  optimizer='adam',\n",
-        "                  metrics=['categorical_accuracy'])\n",
-        "    return model"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "h0psMBCK9-ld",
-        "colab": {}
-      },
-      "source": [
-        "def train_model(model:tf.keras.models.Sequential,\n",
-        "    class_weight=None,\n",
-        "    epochs=config.epochs,\n",
-        "    batch_size=config.batch_size,\n",
-        "    callbacks=None) -> (tf.keras.callbacks.History, str):\n",
-        "    start = time.time()\n",
-        "    history = model.fit(train_features, y_train_binarized,\n",
-        "                        class_weight=class_weight,\n",
-        "                        epochs=epochs,\n",
-        "                        batch_size=batch_size,\n",
-        "                        validation_split=0.1,\n",
-        "                        callbacks=callbacks)\n",
-        "    time_message = f'It took {time.time()-start} seconds'\n",
-        "    return (history, time_message)"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "NCpkOwKNUbXc",
-        "colab_type": "code",
-        "colab": {}
-      },
-      "source": [
-        "def plot_training(H: tf.keras.callbacks.History, N: int) -> None:\n",
-        "    # construct a plot that plots and saves the training history\n",
-        "    plt.style.use(\"ggplot\")\n",
-        "    plt.figure()\n",
-        "    plt.plot(np.arange(0, N), H.history[\"loss\"], label=\"train_loss\")\n",
-        "    plt.plot(np.arange(0, N), H.history[\"val_loss\"], label=\"val_loss\")\n",
-        "    plt.plot(np.arange(0, N), H.history[\"categorical_accuracy\"], label=\"train_acc\")\n",
-        "    plt.plot(np.arange(0, N), H.history[\"val_categorical_accuracy\"], label=\"val_acc\")\n",
-        "    plt.title(\"Training Loss and Accuracy\")\n",
-        "    plt.xlabel(\"Epoch #\")\n",
-        "    plt.ylabel(\"Loss/Accuracy\")\n",
-        "    plt.legend(loc=\"lower left\")\n",
-        "    plt.show()"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "b4iUFcY2Wq_G",
-        "colab_type": "code",
-        "colab": {}
-      },
-      "source": [
-        "def get_metrics(model: tf.keras.models.Sequential,\n",
-        "    test_data: tuple) -> (str, str):\n",
-        "    (X_test, y_test) = test_data\n",
-        "    metrics = model.evaluate(X_test, y_test, verbose=None)\n",
-        "    loss = f'{model.metrics_names[0]}: {metrics[0]}'\n",
-        "    cat_accuracy = f'{model.metrics_names[1]}: {metrics[1]}'\n",
-        "    return(loss, cat_accuracy)"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "colab_type": "code",
-        "id": "2WLMaTYo9cwl",
-        "colab": {}
-      },
-      "source": [
-        "# Define the callbacks\n",
-        "callbacks = [\n",
-        "    ReduceLROnPlateau(), \n",
-        "    EarlyStopping(patience=4), \n",
-        "    ModelCheckpoint(filepath='model-{}.h5'.format(time.time()), save_best_only=True),\n",
-        "    WandbCallback()\n",
-        "]"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "UR9ZLjFlVpo5",
-        "colab_type": "code",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 445
-        },
-        "outputId": "5b6f60d7-5670-418d-d564-ae497f02caf5"
-      },
-      "source": [
-        "cnn_model = get_a_cnn_model()\n",
-        "(history, time_message) = train_model(cnn_model, callbacks=callbacks)\n",
-        "print(time_message)"
-      ],
-      "execution_count": 24,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "text": [
-            "Train on 23536 samples, validate on 2616 samples\n",
-            "Epoch 1/10\n",
-            "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/ops/nn_impl.py:183: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n",
-            "Instructions for updating:\n",
-            "Use tf.where in 2.0, which has the same broadcast rule as np.where\n",
-            "   32/23536 [..............................] - ETA: 52:18 - loss: 0.6989 - categorical_accuracy: 0.0000e+00WARNING:tensorflow:Method (on_train_batch_end) is slow compared to the batch update (0.278268). Check your callbacks.\n",
-            "23536/23536 [==============================] - 15s 635us/sample - loss: 0.1163 - categorical_accuracy: 0.5491 - val_loss: 0.0796 - val_categorical_accuracy: 0.7080\n",
-            "Epoch 2/10\n",
-            "23536/23536 [==============================] - 11s 468us/sample - loss: 0.0746 - categorical_accuracy: 0.6930 - val_loss: 0.0762 - val_categorical_accuracy: 0.6816\n",
-            "Epoch 3/10\n",
-            "23536/23536 [==============================] - 10s 446us/sample - loss: 0.0693 - categorical_accuracy: 0.7096 - val_loss: 0.0759 - val_categorical_accuracy: 0.7026\n",
-            "Epoch 4/10\n",
-            "23536/23536 [==============================] - 11s 448us/sample - loss: 0.0658 - categorical_accuracy: 0.7217 - val_loss: 0.0756 - val_categorical_accuracy: 0.6934\n",
-            "Epoch 5/10\n",
-            "23536/23536 [==============================] - 10s 445us/sample - loss: 0.0629 - categorical_accuracy: 0.7323 - val_loss: 0.0754 - val_categorical_accuracy: 0.7041\n",
-            "Epoch 6/10\n",
-            "23536/23536 [==============================] - 11s 448us/sample - loss: 0.0604 - categorical_accuracy: 0.7413 - val_loss: 0.0766 - val_categorical_accuracy: 0.6984\n",
-            "Epoch 7/10\n",
-            "23536/23536 [==============================] - 10s 445us/sample - loss: 0.0579 - categorical_accuracy: 0.7496 - val_loss: 0.0778 - val_categorical_accuracy: 0.7015\n",
-            "Epoch 8/10\n",
-            "23536/23536 [==============================] - 10s 444us/sample - loss: 0.0554 - categorical_accuracy: 0.7568 - val_loss: 0.0788 - val_categorical_accuracy: 0.6957\n",
-            "Epoch 9/10\n",
-            "23536/23536 [==============================] - 11s 450us/sample - loss: 0.0532 - categorical_accuracy: 0.7629 - val_loss: 0.0805 - val_categorical_accuracy: 0.6988\n",
-            "It took 99.63144588470459 seconds\n"
-          ],
-          "name": "stdout"
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "ERhV1g44WHEj",
-        "colab_type": "code",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 299
-        },
-        "outputId": "acd8747f-1cba-450e-d08e-188a4b434f0a"
-      },
-      "source": [
-        "plot_training(history, len(history.history[\"loss\"]))"
-      ],
-      "execution_count": 25,
-      "outputs": [
-        {
-          "output_type": "display_data",
-          "data": {
-            "image/png": "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\nN6N37954+eWXsX//fnA1bVp26NABkyZNwpAhQzB69GgsXboUubm5TW6zqqoKs2fPRo8ePRAWFgaF\nQoGDBw82+E2b+j2KiopQXFyMxMREhzKDBw9udp8PHTqE33//HY8++igA21nilClT+LNGADh58iQ6\ndOiAe+65x+k6Tp48iV69eiEyMrLZ7TXH2d/dRx99hP79+yMiIgIKhQJvvPEG//twHIfTp09j+PDh\nja4zLS0NV69exQ8//ADAdvYwaNAg9OjR46bjbc8oQbRjcrncYTw3NxdjxoxBt27dsH37dpw4cQI7\nduwA0PzNxICAAIdxhmEc7ie0dBmGYZpchyeMHTsWv//+O+bMmYOKigo8+uijGDFiBB/bli1b8PPP\nPyMpKQnfffcdevTo0eDyhr0XX3wRO3bswJtvvokffvgBWVlZSE5ObvCbtuQ3dMXatWuh1+uhVCoh\nEokgEonw9ttv4+jRo612s1ogsFUlnF3j0PXvIdSq/3e3ZcsWvPzyy5g8eTL27duH06dPY+7cuW7d\nwI6KisJDDz2E9evXQ6/XY+vWrXjmmWdasCfEHiUIwvvpp59gNpvx3nvvITExEd26dcP169d9EkvX\nrl0hEolw/Phxh+k//vjjTa23Z8+eOHv2LMrKyvhp165dw6+//upw81utVuOJJ57AJ598gi+++AIH\nDhzAlStX+Pm9evXC3//+d3z77bd4/PHHsX79+ka3efjwYUydOhWPPPIIevfujTvvvBM5OTluxV17\n47r+fYtjx441uZxWq8WuXbuwfv16ZGVl8Z8zZ85g4MCB/M3qfv36obCwEOfOnXO6nn79+uHs2bON\nnhVGREQAAAoKCvhpp06dcmnfDh8+jIEDB2LWrFno168funTpgry8PH4+wzDo27cv9u/f3+R6ZsyY\ngV27dvFnRhMmTHBp+6RxlCAIr2vXrmBZFqtWrUJeXh527tyJxYsX+ySWsLAwPPnkk5g7dy727duH\n7OxszJ49G3l5eS6dVRQUFDhUiFlZWfjjjz8wdepUKBQKPPbYYzh9+jQyMzPxP//zP+jcuTP+8pe/\nALDdpP7yyy9x+fJlZGdn4/PPP0dwcDBuu+02XLhwAfPnz8exY8dw9epVHDt2DMePH2/yUka3bt2w\na9cunDx5EufPn0daWprD0z6ueuWVV/gb+Tk5OVi8eDEOHz7c5DKbNm1CYGAgpkyZgtjYWIfP448/\nzt+sHjlyJAYMGIDx48djz549yMvLw5EjR7Bx40YA4J9eGjt2LA4ePIi8vDwcOHAA//nPfwAAd999\nN6Kjo/Haa68hOzsbhw4dwpw5c1zar27duuHUqVPYu3cvcnNzsXz5cuzZs8ehzGuvvYZdu3Zh9uzZ\nOHfuHC5duoQNGzY4JO3k5GTExMRg7ty5mDRpEgIDA935eYkTlCAIr3///li5ciXef/999OjRA6tX\nr3Z4isbbVq1ahWHDhmHixIm49957YTKZ8Pjjjzf5xJD9sn379nX4LFu2DAqFAgcOHADLshg8eDCG\nDh0KlUqFr7/+mn+3IyAgAP/7v/+Lvn37YuDAgcjJycG3334LmUyGoKAgXLhwARMnTkTXrl0xceJE\nDB06FCtXrmw0ltWrVyMiIgL3338/hg0bhq5du2Ls2LFu/x5z5szBM888g+effx59+/bFmTNnMH/+\n/CaXWb9+PVJTUxtcvgJsR9hlZWX4z3/+A6FQiG+//RbJycl46qmn0L17d0ybNg2lpaUAgKCgIBw5\ncgSdO3fGhAkTcPfdd2PWrFn8I6QSiQTbt2/H1atX0adPH/ztb3/Du+++69J+vfDCC5gwYQImTZrE\nn6ksWLDAoczYsWPx1Vdf4dChQ+jfvz8SEhLw73//G2KxmC/DMAyeeuopmEwmurzUShiOox7lyK0j\nMTERd911F7Zu3errUIgfmjVrFjIzMxtcmiQt497rsIR40enTp3H+/HkMHDgQBoMBn376KY4fP+7y\ns/+k/SgvL8eFCxfw6aef4tNPP/V1OG2G1xJEVlYWNm7cCJZlkZycjNTUVIf5xcXFWLNmDXQ6HViW\nxeOPP464uDhvhUf81AcffIBLly4BsF3n3rt3L5KSknwcFfE3I0aMwNmzZzF58mS6Od2KvHKJiWVZ\nvPjii1iwYAFUKhXmzZuHF198ER07duTLrF27FnfddReGDx+Oa9euYfHixVizZo2nQyOEENIIr9yk\nzs3NRVRUFCIjIyESiZCYmNig0TiGYfh2Z6qrqxEWFuaN0AghhDTCK5eYSkpKoFKp+HGVStXgOfAJ\nEybg7bffxjfffAOj0YhXX33V6brS09ORnp4OAFiyZInngiaEkHbOb25SHzt2DEOGDMHYsWNx+fJl\nrF69GitWrODf0KyVkpLCN/8AOL6Y4w61Wt2iZ9E9jeJyD8XlPn+NjeJyz83EFR0d7VI5r1xiUiqV\n0Gq1/LhWq+Vbiax18OBBvp2drl27wmw2o7Ky0hvhEUIIccIrCUKj0aCwsBBFRUWwWCzIyMhAfHy8\nQxm1Wo1ffvkFgK3pA7PZjODgYG+ERwghxAmvXGISCoVIS0vDokWLwLIskpKSEBMTg+3bt0Oj0SA+\nPp5vXXLv3r0AgJkzZ/qkoTZCCCE2XrsHERcX1+C9htrmhwFbk8tvvfWWt8IhhBDSDGqLiRBCiFOU\nIAghhDhFCYIQQohTfvMeBCGEtGcsy8FqAaxWDhYLB6uFg8WCmu+aeRYOFqttHne3AYzQszFRgiCE\nEBdxHAfWCr6StlrgvDK31k13Os/MwWp1nOdu77IqtRHqKM/sZy1KEISQNo1lOVjMtsrZYobdsO3b\nbK6ZbuEazLOYOXCcDiajpeboHYAbzZsyDCASMRCKAKGI4YclUgZCoQBCUe38unlCYd1w/XkiEQOh\n0DYcHh7i8Te8KUEQQvwOyzZeoVvMtcOO88z2ScCuPGt1bZu1FbBIzPDfgTIGcrkEFivTsKIX1lXg\ntmmOSUAkZCAQ3trvclGCIIS0qtojdnNNRW421R+G03ksaztSN5tdr9QFQkBsV6HbKnVAJBY0qOxF\nIvBlxHblRTWVOyNwXpn7a1tM3kAJghDCq73Gbm6ygnccNps5WOyGrZbmtyMSAaIABmKx7SORMlAo\nJLCyziv0BpW92Hb0LmikUietgxIEIW0Ma7VV1CZTTSVusqvMTRx+FRWjsqK60Yq/uZulDGOruMX2\nFXywgB8WB9QcpddU5PblRAG2o3dnR+vt+UjdX1GCIMQPWS11FbrJSSVvNrF2w47zrM1cnhGJjLYj\ncLsKXaYQOFbiToZrK36hENROWjtBCYIQD+C4uuvwdZU8W6+S5xqt5Js7iheJwVfa4gAB5EGCmmHb\nJ6C2Qrcbrj2Sj4gMpyN14hJKEIQ0g+Ns19VNRhYmIwejiYPZyNnGTRxMxtpP3bjZVNZsJc9feqmp\nvKWBjpW8/Tz7Sl4kpmvvxDsoQZB2heNsl2D4Cr22cjfZjZvqKnxzzXBjlT3D2Cr6AIntI1cIEaZi\nEBIqg8ViaFDhB9hV8nSZhvg7ShDklmaxsNBXs41X9k4q/6YeoQyQ2Crx2so+wK7yt30EDglB3EhF\nTzdcSVtACYL4ldpr90YjB6OBg9HAwmiwVfC28ZppRtu31VLW6Lr4ijyAQaBMgJAwgUMCCJAI6ir+\nmiP8xp6FJ6Q9ogRBPI5jbUfuRgMHY01Fb+Ir+bokYDSyMBkav5wTILE9Ly+RChAmF0AiFSNMqYDZ\nUt2wwqfKnpCbRgmCtAjLOh7Nm+pV9A5JwMg5bb+GEQASia3Cl0gZBIWI+GGJRMAnA4nUdoTv/Nn5\nMBQXu/jaLSHELe0yQVRVVcFqtYJhGAgE1CVGfWYTi2odB301C72ORXU1C9Z6HZXl+poEYHsU0xmh\nEJBIbUfygXIBQlWOFX5AbQKQNn79nhDiH7yWILKysrBx40awLIvk5GSkpqY6zN+0aRPOnz8PADCZ\nTCgvL8emTZs8EsulS5eQkZEBoVAItVqN8PBw/qNWqyEStd28yXG2G7fVOrYuAdQM135bzI7LCISA\nQsFCFAAEhQihrjmyt7/kU5sEROL2XeFzHAeTyYTS0lLodDqIxWKIRCI6ECG3JK/UhCzLYsOGDViw\nYAFUKhXmzZuH+Ph4dOzYkS8zbdo0fnjfvn3Iy8vzWDzdunVDdHQ0rly5ghs3biAnJwe//PILANsb\nokql0iFphIeHQyKReCye1sSyHAx6jj/y19er/PXVbIOneERiQCYTQCYXQBUuQqCMASeohslUDr2x\nHJWVZTCazTCYOViEUljMElgEElgFUrACCTiBFBwjAQcJpIy0zSRYjuNgsVig1+thMBig1+sbDNuP\nGwwGGAwGsE5uogiFQj5Z2H83NuzqtNphX56J2R4dtoJlWf67dri5cfvvsLAw6PX6JvebEq13eeV/\ncm5uLqKiohAZGQkASExMRGZmpkOCsHfs2DFMnDjRY/EEBQXhrrvuQnR0NADbH3hlZSWKiopw48YN\n3LhxA/n5+bh06RK/TEhICJ8sIiIiEB4eDplM5rEYG2O1co0e+et1LAx6Dly9qz8BEgYyuQDBIUJE\nRYsRKBcgUCaAOMACo6kClVVlKC0thba0FKX5pSgrK4PFUtfiWkBAAEJDQ/kK0GQyNRmjUCiEVCqF\nRCKBRCLhh5ubJpFIPJpcLBYLvw/OKntnw9ZG2q1gGAZSqRRSqRSBgYEICwtDYGAgP65Sqfjf0Ww2\n89/1hw0Gg9P57hKJRC4lHZFIBKlUiqqqKpcr7uYqea7+H5wHCQSCRpOHs+nuJuKWJCCO45wmyZtJ\nlq6UTUhIQEhIiAd+5TpeSRAlJSVQqVT8uEqlQk5OjtOyN27cQFFREWJjY53OT09PR3p6OgBgyZIl\nUKvVLYpJJBI5LBseHo5OnTo5lKmsrERhYaHDJzc3l58fFBSEDh06oEOHDoiOjkaHDh0QEhJyU0dz\nrJWBAEGoqrSgqtIMXaXFYVivd6ywGAaQyUVQBIkR1lEMeZAIiiDbuCJIBJlCAJ2uCjdu3IBWq0Vx\ncTGu5NuGKyoq7NbDICwsDCqVCl26dEF4eDhUKhXCw8Mhl8shFov5iotl2QYVbVNH1nq9HiUlJTAY\nDDAajU3uv1gsdqhoaz+NjRcXF6OqqgrV1dUOH51O12BaU9sODAyETCaDTCaDSqXih2UyGeRyucO4\nTCaDVCptsjIRiUQtqugBW4VTmyxMJpPDcHPj9eeZTCbodDqHeQKBAEKhsMHHfrpYLHZaxlnZ5j6u\nlBUIBOA4Dnq93uk+1f92tv+VlZUNyribvOwTRkBAAMRiMV/5N/XxpMZ+M71eD41G49Ft+921gGPH\njiEhIaHR/3wpKSlISUnhx1v6MpKrLzIplUoolUr07NkTAGA0GvkkVnu2kZOTw/8hSqXSBpenQkND\nXToyuXzBgOxzBodpAgEQKBMgUC5AeJQQgXLbGYCsZpo00NbsgslkQlmZFqWlpSjMK0Vpqe3j7Gwg\nLCwM0dHR6NmzJ8LCwhAWFoaQkBCnR++1iaCx36v2yD80NLTZ/QNsycVoNMJoNPLrrh2vnWb/XVxc\nzA+bzebmN4CGSSYiIqJBYrFPOM1V9vXVJpymtOaLcgKBgP+dW4O/vcRXe2SsVqthtVoREBDQKuut\nrdjrn6HZjzd3hmexWCCVSmGxWPhEVpvw3Pm2T5JNjdf/ZpjGH+S4mX/H2qsnzfFKglAqldBqtfy4\nVquFUql0WjYjIwPTp0/3RlgtIpFI0LFjR4fLY2azGVqt1iFpZGVl8deixWKxw83wiIgIKJVKCIV1\nPY5fybYlhzs0cqgjOP4ykERa9wdSeymstLQU+QV1CaCkpAQ6nY5fF8MwCAoKglKpRMeOHaFUKhEa\nGoqwsDDIZDKfXq8WCAR8xewuq9XaIJFIpVKYzWaHir+t3AMhN4dhGP6y2s3wt4TqTV75n6TRaFBY\nWIiioiIolUpkZGRg1qxZDcr98ccf0Ol06Nq1qzfCajVisRhRUVGIiqrrQdxqtaK0tNQhaVy8eBFn\nz54FYKsoay/hCJkwFBcE4/Y7wjFkeBSuXy9EWVkJin6vOxNo6mwgJiaGPxNo6mzgVicUCvlLPLXa\n839eQjzNK7WIUChEWloaFi1aBJZlkZSUhJiYGGzfvh0ajQbx8fEAbJeXEhMT28Sz8bWP0Nrf5+A4\nDuXl5XzSKCoqQm7urzCZbJeVrpcx+CVH1uTZgH0i8PXZACGkbfPaYWZcXBzi4uIcpj366KMO4558\ncskfMAyD0NBQhIaGomvXrrj+hxmZR6sQFGJAR001tCXFMJvNkEgkbf5sgBDi/6jm8ZEb1804maFD\nqFKEe4dEQSRm0BkaumRCCPEb9NaJD2hvWJB5VAdFkAAD75e3+7ePCSH+iRKEl5WVWPDzkSpIZQIk\nDFEgQEL/BIQQ/0S1kxdVllvx4yEdxGIG9w5RQCKln58Q4r+ohvISXaUVx3+ogkAA3JukQKCMfnpC\niH+jWsoL9NUsjv9QBZYF7h2igFwhbH4hQgjxMUoQHmY02JKD2cwh4QE5gkIoORBCbg2UIDzIZLQl\nB0M1i4H3KRCqpKeKCSG3DkoQHmIxc/jpsA66Shb9B8uhDKfkQAi5tVCC8ACLhcPPR6pQXmpFv0Q5\nwqPEvg6JEELcRgmilbFWDiczdNDesKLvQBmibqPkQAi5NVGCaEUsy+HUj9UoKrSgV3wgbrujddq1\nJ4QQX6AE0Uo4jsOZzGoUXjOjRx8p7tDcGn1YE0JIYyhBtAKO4/DLKT2u/WZGt1gpNN2kvg6JEEJu\nGiWIm8RxHC6dNeC3XBM03STo0oPOHAghbQMliJuUc9GI3EtG3KEJwN29pdSBDyGkzaAEcRN+vWxE\n9jkDbrtDjHv6BVJyIIS0KZQgWuj3X404f1qPqNvE6DOAuv4khLQ9Xnu9NysrCxs3bgTLskhOTkZq\namqDMhkZGdixYwcYhsEdd9yBF1980VvhueWP3004k6lHeJQIcffKIBBQciCEtD1eSRAsy2LDhg1Y\nsGABVCoV5s2bh/j4eHTs2JEvU1hYiC+//BJvvfUWFAoFysvLvRGa267/YcbpH6uhDBcifpAcQiEl\nB0JI2+SVS0y5ubmIiopCZGQkRCIREhMTkZmZ6VDmu+++w4gRI6BQKAAAISEh3gjNLTf+tPUjHRIm\nxID7FBCJKDkQQtour5xBlJSUQKVS8eMqlQo5OTkOZQoKCgAAr776KliWxYQJE9CnTx9vhOeSkmJb\nP9Lymn6kxdSPNCGkjfObJkZZlkVhYSEWLlyIkpISLFy4EMuXL4dcLncol56ejvT0dADAkiVLoFar\nW7Q9kUjk8rLaG0ZkHvkDcrkYD/7lNsjknvvZ3InLmygu9/hrXID/xkZxuccbcXklQSiVSmi1Wn5c\nq9VCqVQ2KNOlSxeIRCJERESgQ4cOKCwsROfOnR3KpaSkICUlhR8vLi5uUUxqtdqlZSsrrMg4WAWh\nCOh/XyCq9WWo1rdok60al7dRXO7x17gA/42N4nLPzcQVHR3tUjmv3IPQaDQoLCxEUVERLBYLMjIy\nEB8f71BmwIABOH/+PACgoqIChYWFiIyM9EZ4jdJVWfHjD1VgGCBhiAIyOT0VTAhpP7xyBiEUCpGW\nloZFixaBZVkkJSUhJiYG27dvh0ajQXx8PHr37o0zZ87gpZdegkAgwKRJkxAUFOSN8Jyy9SOtg9UK\nJCYpoAiirkIJIe2L1+5BxMXFIS4uzmHao48+yg8zDIOpU6di6tSp3gqpUXw/0kYW9yYpEBxKyYEQ\n0v7QNZN6TCYWPx6qgr6axYD7qR9pQkj7RQnCjsXM4efDOlRVsOg/SA4V9SNNCGnHKEHUsFo4/HxU\nh7ISK+LulSGiA3UVSghp3yhBwNaP9IkMHbRFFvQZIEOHjtRVKCGEtPsEwbEcTv9k60f6nn6B6Hgn\nJQdCCAHaeYLgOA5nTuhRkG9Gj95S3NmZeoMjhJBa7TZBcByH86f1yM8zoWtPCTTdqR9pQgix124T\nxKmfSpCXY0KnrhJ07UnJgRBC6muXz3H+etnWG9ztnQLQow/1I00IIc64fAZRWVnpyTi8KjxKhB69\nQ9CL+pEmhJBGuXwGMXPmTNxzzz24//77ER8fD5Ho1j35CAoW4q5O/tlCIyGE+AuXzyDWrFmD2NhY\n/Pe//8XTTz+NtWvX4tKlS56MjRBCiA+5fBoQHByMUaNGYdSoUSgoKMDhw4exevVqMAyD++67D0OH\nDkV4eLgnYyWEEOJFLXqKqaysDGVlZdDr9YiMjERJSQnmzJmDL7/8srXjI4QQ4iMun0Hk5+fjyJEj\nOHr0KCQSCR544AEsW7aM72t6/PjxmD17NlJTUz0WLCGEEO9xOUEsXLgQgwYNwssvv9ygG1AAiIiI\nwKhRo1o1OEIIIb7jcoJYt25ds08u2XcARAgh5Nbm8j2IzZs3Izs722FadnY2Nm3a1NoxEUII8QMu\nJ4hjx45Bo9E4TOvUqROOHj3a6kERQgjxPZcvMTEMA5ZlHaaxLAuO41xaPisrCxs3bgTLskhOTm5w\nM/uHH37Ali1boFQqAQAjR45EcnKyq+ERQghpZS4niO7du2Pbtm2YNGkSBAIBWJbFjh070L1792aX\nZVkWGzZswIIFC6BSqTBv3jzEx8ejY8eODuUSExMxffp09/eCEEJIq3M5QTz55JNYsmQJZsyYAbXa\n1kxFWFgY5s6d2+yyubm5iIq0mstfAAAgAElEQVSKQmRkJABbIsjMzGyQIAghhPgPlxOESqXCu+++\ni9zcXGi1WqhUKnTu3BkCQfO3MUpKSvj3JWrXlZOT06DcTz/9hIsXL6JDhw6YOnUq1Gp1gzLp6elI\nT08HACxZssRpGVeIRKIWL+tJFJd7KC73+WtsFJd7vBGXWy3uCQQCdO3a1SOB9OvXD4MGDYJYLMaB\nAwewZs0aLFy4sEG5lJQUpKSk8OMtbXCv9izI31Bc7qG43OevsVFc7rmZuKKjo10q53KCqK6uxo4d\nO3DhwgVUVlY63Jz+5z//2eSySqUSWq2WH9dqtfzN6FpBQUH8cHJyMj777DNXQyOEEOIBLj/m+skn\nnyAvLw+PPPIIqqqqkJaWBrVajdGjRze7rEajQWFhIYqKimCxWJCRkYH4+HiHMqWlpfzwiRMn6P4E\nIYT4mMtnEGfPnsWqVasQFBQEgUCA/v37Q6PR4N1338WYMWOaXFYoFCItLQ2LFi0Cy7JISkpCTEwM\ntm/fDo1Gg/j4eOzbtw8nTpyAUCiEQqHAzJkzb3rnCCGEtJzLCYLjOMhkMgCAVCpFdXU1QkNDcf36\ndZeWj4uLQ1xcnMM0+6Y5Hn/8cTz++OOuhkMIIcTDXE4Qd9xxBy5cuIB77rkH3bt3xyeffAKpVIoO\nHTp4Mj5CCCE+4vI9iBkzZvAdAj355JMICAiATqfD888/77HgCCGE+I5LZxAsy+KHH37Aww8/DAAI\nCQnBX//6V48GRgghxLdcOoMQCATYv38/hEKhp+MhhBDiJ1y+xHT//ffjwIEDnoyFEEKIH3H5JnVu\nbi6++eYbfPXVV1CpVGAYhp/3xhtveCQ4QgghvuNygkhOTqbmtwkhpB1xOUEMGTLEg2EQQgjxNy4n\niIMHDzY6b+jQoa0SDCGEEP/hcoI4cuSIw3hZWRmuX7+O7t27U4IghJA2yOUE4azp7YMHD+KPP/5o\n1YAIIYT4B5cfc3VmyJAhTV56IoQQcuty+QyCZVmHcZPJhMOHD0Mul7d6UIQQQnzP5QTx2GOPNZim\nVCoxY8aMVg2IEEKIf3A5QXz44YcO4xKJBMHBwa0eECGEEP/gcoIQCoUICAiAQqHgp1VVVcFkMjXo\nPpQQQsitz+Wb1MuWLUNJSYnDtJKSEixfvrzVgyKEEOJ7LieIgoIC3H777Q7Tbr/9dnrMlRBC2iiX\nE0RwcHCD7kWvX7+OoKCgVg+KEEKI77mcIJKSkrBixQqcPHkS165dw4kTJ7BixQqX36LOysrCiy++\niBdeeAFffvllo+V+/PFHTJw4EVeuXHE1NEIIIR7g8k3q1NRUiEQibNmyBVqtFmq1GklJSRgzZkyz\ny7Isiw0bNmDBggVQqVSYN28e4uPj0bFjR4dyer0e+/btQ5cuXdzfE0IIIa3K5QQhEAgwbtw4jBs3\nzu2N5ObmIioqCpGRkQCAxMREZGZmNkgQ27dvx0MPPYSvvvrK7W0QQghpXS4niC+//BKxsbHo3Lkz\nPy03Nxfnz5/HQw891OSyJSUlUKlU/LhKpUJOTo5DmV9//RXFxcWIi4trMkGkp6cjPT0dALBkyRKo\n1WpXd8GBSCRq8bKeRHG5h+Jyn7/GRnG5xxtxuZwgvv76a4wcOdJhWseOHbFs2bJmE0RzWJbF5s2b\nMXPmzGbLpqSkICUlhR8vLi5u0TbVanWLl/Ukiss9FJf7/DU2iss9NxNXdHS0S+VcThAWiwUikWNx\nkUgEk8nU7LJKpRJarZYf12q1Di/XGQwG5Ofn812XlpWVYenSpZgzZw40Go2rIRJCCGlFLieITp06\n4dtvv8Xo0aP5afv370enTp2aXVaj0aCwsBBFRUVQKpXIyMjArFmz+PkymQwbNmzgx19//XVMnjyZ\nkgMhhPiQywli6tSpePvtt3H48GFERkbizz//RFlZGV599dVmlxUKhUhLS8OiRYvAsiySkpIQExOD\n7du3Q6PRID4+/qZ2ghBCSOtjOI7jXC1sMBhw8uRJaLVaqFQq9OvXD1Kp1JPxNaugoKBFy7XF64qe\nRHG5x1/jAvw3NorLPX51DwIApFIpBg0axI/n5+fj0KFDmDRpknvREUII8XtuJQgAqKiowNGjR3Ho\n0CH89ttv6Nu3ryfiIoQQ4mMuJQiLxYKTJ0/i0KFDyMrKgkqlQmlpKRYvXuzSTWpCCCG3nmYTxCef\nfILjx49DKBQiISEBr7/+Orp27YpnnnnG4eU3QgghbUuzCeLAgQNQKBSYMGECBg0aBJlM5o24CCGE\n+FizCWL16tU4fPgwvvrqK2zatAl9+/bF4MGD4cbDT4QQQm5BzTb3HRERgUceeQSrV6/GggULoFAo\n8PHHH6OiogKff/45rl275o04CSGEeJnL/UEAwN13342//vWvWLduHV544QVotVrMnj3bU7ERQgjx\noWYvMW3btg19+/ZF165dwTAMACAgIACDBw/G4MGDG/RTTQghpG1oNkFIpVJs3boVhYWFuOeee9C3\nb1/06dOH72rUvtE9QgghbUezCSI1NRWpqanQ6XQ4c+YMTp06hS1btiA8PBxxcXHo27cvvQtBCCFt\nkMtvUsvlciQmJiIxMREcxyE3NxenT5/G+vXrUVpaiilTpiAxMdGTsRJCCPEit5vaAACGYdClSxd0\n6dIFEydORHl5Oaqrq1s7NkIIIT7k8lNMe/bswW+//QYAuHz5Mp599lk899xzuHz5MkJCQtChQwdP\nxUgIIcQHXE4Qe/fuRUREBADg888/x5gxYzB+/Hhs2rTJU7ERQgjxIZcTRHV1NWQyGfR6PX777Tc8\n+OCDGDp0aIv7YyCEEOLfXL4HoVKpkJ2djfz8fNx9990QCASorq6GQODWu3aEEEJuES4niEmTJmHl\nypUQiUR45ZVXAACnTp1C586dPRYcIYQQ33E5QcTFxWHt2rUO0xISEpCQkNDqQRFCCPE9lxPEtWvX\noFAoEBoaCoPBgK+++goMw2DcuHEQiZpfTVZWFjZu3AiWZZGcnIzU1FSH+fv378e3334LgUAAqVSK\nGTNmoGPHju7vESGEkFbh8g2E999/n3/XYfPmzbh48SJycnKwbt26ZpdlWRYbNmzA/PnzsWrVKhw7\ndqxBK7CDBw/GihUrsGzZMjz00EP417/+5eauEEIIaU0un0EUFRUhOjoaHMfh559/xsqVKxEQEIDn\nn3++2WVzc3MRFRWFyMhIAEBiYiIyMzMdzhDsOyIyGAx8w4CEEEJ8w+UEERAQAL1ej2vXrkGtViM4\nOBhWqxVms7nZZUtKShy6J1WpVMjJyWlQ7ptvvsHevXthsVjw2muvOV1Xeno60tPTAQBLliyBWq12\ndRcciESiFi/rSRSXeygu9/lrbBSXe7wRl8sJYtCgQXjzzTeh1+sxcuRIAEBeXh7/8lxrGDlyJEaO\nHImjR49i586dTs9OUlJSkJKSwo8XFxe3aFtqtbrFy3oSxeUeist9/hobxeWem4krOjrapXIuJ4hp\n06bhzJkzEAqFiI2NBWBrk2nq1KnNLqtUKqHVavlxrVbbZDPhiYmJWL9+vauhEUII8QC33nLr3bs3\noqKicPnyZRQXF0Oj0fDJoikajQaFhYUoKiqCxWJBRkYG4uPjHcoUFhbyw6dOnaK2nQghxMdcPoMo\nLS3Fe++9h5ycHCgUClRWVqJr16548cUXm+00SCgUIi0tDYsWLQLLskhKSkJMTAy2b98OjUaD+Ph4\nfPPNNzh37hyEQiEUCgWee+65m945QgghLedygli/fj3uuOMOzJs3D1KpFAaDAZ9//jnWr1+PuXPn\nNrt8XFwc4uLiHKY9+uij/PCTTz7pRtiEEEI8zeVLTNnZ2ZgyZQqkUikAW1ekkyZNwuXLlz0WHCGE\nEN9xq0e5a9eu4c477+SnFRQUOLy/4A84joPBYADLsk2+S/Hnn3/CaDR6MTLX+EtcHMfxb7XTOymE\ntE8uJ4hx48bhrbfewtChQxEeHo4bN27ghx9+cLhM5A8MBgPEYnGzzX+IRCIIhUIvReU6f4rLYrHA\nYDAgMDDQ16EQQnzA5QSRkpKCqKgoHD16FL///jvCwsIwa9YsXLhwwZPxuY1lWZfahiLNE4lEfnE2\nQwjxDbdq0tjYWIfHWs1mM95++22/OougyyGti35PQtov6u2HEEKIU5QgCCGEONXsJaZffvml0XkW\ni6VVg2kLysvL8cUXX2DatGluLTd58mR8+OGHDo0auuJvf/sbUlJSMGbMGLeWI4SQ5jSbIP75z382\nOd8fWzn0pYqKCmzevLlBgrBYLE3ePN+yZYuHIyOEEPc0myDWrFnjjTg8gt22Hlx+nvN5DAOO49xe\nJxNzFwT/83Sj89955x1cvXoVw4YNg1gshkQiQUhICHJzc3H06FGkpaWhoKAARqMR06dPx6RJkwAA\nAwcOxL59+2AwGPDYY49hwIABOHHiBKKiovDpp5+69KjpkSNH8NZbb8FqtaJ3795YvHgxJBIJ3nnn\nHezfvx8ikQj3338/XnvtNezevRurVq2CQCBAcHAwdu3a5fZvQQhp2+h50FY2f/58ZGdn48CBA8jI\nyMCUKVNw8OBB3H777QCAFStWICwsDHq9HqNHj8aoUaMatGWVl5eHNWvWYNmyZZgxYwa+/vprjB8/\nvsntGgwGvPTSS3z7VrNmzcLmzZsxfvx47Nu3D4cPHwbDMCgvLwcAvPfee9i6dSs6dOjATyOEEHtt\nOkE0daQvEom8cg+lT58+fHIAgE8//RT79u0DYHsTPS8vr0GCiImJ4R8n7tWrF/Lz85vdzpUrV3D7\n7bdDo9EAACZMmIB//etfePLJJyGRSPDKK6849KURHx+Pl156CWPHjsWDDz7YKvtKCGlb6CkmD7Nv\niiQjIwNHjhzB7t27kZ6ejtjYWKcvokkkEn5YKBTCarW2ePsikQh79+7F6NGjkZ6ejieeeAIA8O67\n72LOnDkoKCjAgw8+iJKSkhZvgxDSNrXpMwhfkMvlqKqqcjqvsrISISEhCAwMRG5uLk6dOtVq29Vo\nNMjPz0deXh7uuusu7Ny5EwkJCdDpdNDr9UhOTkb//v1x7733AgB+++03voXd77//HgUFBc02204I\naV8oQbQypVKJ/v37Y+jQoZBKpQ5PeQ0ZMgRbtmzBAw88AI1G06D585shlUqxcuVKzJgxg79JPXny\nZJSVlSEtLQ1GoxEcx2HhwoUAgLfffht5eXngOA6DBw9Gz549Wy0WQkjbwHAteZTHjxQUFDiMV1dX\nu9TCrLfuQbjL3+Kq/T3bYr+8nuSvcQH+GxvF5R5v9ElN9yAIIYQ4RZeYbhHz589HZmamw7SnnnrK\nrxpKJIS0LZQgbhHvvPOOr0MghLQzXksQWVlZ2LhxI1iWRXJyMlJTUx3m79mzB9999x2EQiGCg4Px\n7LPPIjw83FvhEUIIqccr9yBYlsWGDRswf/58rFq1CseOHcO1a9ccytx5551YsmQJli9fjoSEBHz2\n2WfeCI0QQkgjvJIgcnNzERUVhcjISIhEIiQmJja4nh4bG8u/INalSxd6cYsQQnzMK5eYSkpKHJqx\nVqlUyMnJabT8wYMH0adPH6fz0tPTkZ6eDgBYsmRJg9Zk//zzT5e7HPXXrkn9KS6JRAK1Wg2RSOSX\nLfdSXO7z19goLvd4Iy7/qYlqHD58GL/++itef/11p/Pt2xMC0OA5YKPRCKFQ2Ox2/OV9gy5dujgk\nS/u48vPzMXXqVBw8eNBX4cFoNKK4uLhNPgvuSf4aF+C/sVFc7mkz70EolUpotVp+XKvVOm3W4ezZ\ns/jiiy8wZ84ciMVib4RGCCGkEV45g9BoNCgsLERRURGUSiUyMjIwa9YshzJ5eXlYv3495s+fj5CQ\nkFbZ7icn/kReqcHpPKaF/UHcFSbFU/GRjc5/5513EB0dzXcYtGLFCgiFQmRkZKC8vBwWiwVz5szB\niBEj3NquwWDAvHnzcPbsWQiFQixcuBCDBg1CdnY2Xn75ZZhMJnAch3Xr1iEqKgozZsxAYWEhWJbF\niy++iIceesjtfSWEtG9eSRBCoRBpaWlYtGgRWJZFUlISYmJi+L4L4uPj8dlnn8FgMGDlypUAbKdP\nc+fO9UZ4rWrcuHFYuHAhnyB2796NrVu3Yvr06QgKCkJJSQnGjh2L4cOHg2EYl9e7adMmMAyD7777\nDrm5uXjsscdw5MgRbNmyBdOnT8fDDz8Mk8kEq9WKgwcPIioqiu+lrqKiwhO7Sghp47x2D6K25VB7\n9m8Bv/rqq62+zaaO9D11DyI2NhbFxcW4fv06tFotQkJCEBERgddffx0//fQTGIbB9evXcePGDURE\nRLi83szMTDz55JMAgM6dO6Njx4749ddf0a9fP3zwwQcoLCzEgw8+iE6dOqF79+548803sWjRIqSk\npGDgwIGtvp+EkLaP2mLygDFjxmDv3r346quvMG7cOOzatQtarRb79u3DgQMHoFarnfYD0RJ/+ctf\nsHHjRkilUkyePBlHjx6FRqPBN998g+7du2Pp0qVYtWpVq2yLENK+UILwgHHjxuG///0v9u7dizFj\nxqCyshJqtRpisdjpS4KuGDBgAL744gsAtt7j/vjjD2g0Gly9ehV33HEHpk+fjhEjRuDixYu4fv06\nAgMDMX78ePz1r3/FuXPnWnsXCSHtgN895toWdOvWDTqdjn858OGHH8bUqVORnJyMXr16oXPnzm6v\nc+rUqZg3bx6Sk5MhFAqxatUqSCQS7N69Gzt37oRIJEJERAReeOEFnDlzBm+//TYYhoFYLMbixYs9\nsJeEkLaO+oPwM/4WF/UH0TL+Ghfgv7FRXO5pM+9BEEIIufXQJSY/cPHiRf69kNr3MyQSCfbs2ePj\nyAgh7RklCD9w991348CBAwD87xITIaT9oktMhBBCnKIEQQghxClKEIQQQpyiBEEIIcQpShCtrLy8\nHJs2bXJ7ucmTJ6O8vLz1AyKEkBZq008x/XKqGhVlVqfzWtrcd3CoELFxjb+IV1FRgc2bN/Otuday\nWCxN9hRX2/IqIYT4izadIHzhnXfewdWrVzFs2DCIxWJIJBKEhIQgNzcXR48eRVpaGgoKCmA0GjF9\n+nRMmjQJADBw4EDs27cPBoMBjz32GAYMGIATJ04gKioKn376KQIDA51ub+vWrdi6dStMJhPuuusu\nfPDBBwgMDMSNGzfwj3/8A1evXgUALF68GP3798eOHTuwdu1aALbHa1evXu2dH4YQcstp0wmiqSN9\nT71vMH/+fGRnZ+PAgQPIyMjAlClTcPDgQdx+++0AbB0IhYWFQa/XY/To0Rg1alSD3vXy8vKwZs0a\nLFu2DDNmzMDXX3+N8ePHO93egw8+iCeeeAIA8O677+Lzzz9HWloaXn31VSQkJGDDhg2wWq3Q6XTI\nzs7G+++/j6+++gpKpRKlpaWtvv+EkLajTScIf9CnTx8+OQDAp59+in379gGwtSOVl5fXIEHExMQg\nNjYWANCrVy/k5+c3uv7s7GwsXboUFRUV0Ol0eOCBBwAAx44dw/vvvw/A1mFTcHAw/vOf/2DMmDH8\n9sLCwlpvRwkhbU67TBCcyQi2ugqcRApG6NmfwL7hwIyMDBw5cgS7d+9GYGAgHnnkEaf9QkgkEn5Y\nKBTCYHDebSoAvPTSS9iwYQN69uyJ7du34/jx4627A4SQdqt9PsVUXQVrUSGQ/xu4wmvgykvAmYwt\numldn1wuR1VVldN5lZWVCAkJQWBgIHJzc3Hq1Kmb3l5VVRUiIyNhNpv5/iIAYPDgwdi8eTMAwGq1\noqKiAoMGDcKePXtQUlICAHSJiRDSpHZ5BoEQJURBIbBUVgDVOqBUa/uIxOBkckAmBySBbvUZXUup\nVKJ///4YOnQopFIp1Go1P2/IkCHYsmULHnjgAWg0mgZdsLbE7NmzMWbMGKhUKvTt25dPTm+++Sbm\nzJmDbdu2QSAQYPHixYiPj8esWbPwyCOPQCAQIDY2Fu+9995Nx0AIaZu81h9EVlYWNm7cCJZlkZyc\njNTUVIf5Fy5cwL/+9S9cvXoVf/vb35CQkODSelujPwjOYgH0OluyMFQDHAcIhECgzJYsAmVgBEIX\n9/Tm+FtjfdQfRMv4a1yA/8ZGcbnHG/1BeOUMgmVZbNiwAQsWLIBKpcK8efMQHx+Pjh078mXUajVm\nzpyJ3bt3eyMkB4xIBASFAEEh4FgW0FfbEoZeB+gqAYYBJw0EAm1nF4xI7PUYCSHE27ySIHJzc/nu\nNwEgMTERmZmZDgkiIiICAFp0Wac1MQIBIFcAcoXtnoTRYDuz0OuAkhtAyQ1wAZKaMws5ECDxSszz\n589HZmamw7SnnnoKjz76qMe3TQhpn7ySIEpKSqBSqfhxlUqFnJycFq0rPT0d6enpAIAlS5Y4XOMH\ngD///LPJN5btuVROLAYUQQBqnn7SVYGrrgJXXgqUlQAiMRiZAoxcASZQZkswN8lZXEuXLr3p9baE\nRCKBWq2GSCRq8Fv7A4rLff4aG8XlHm/EdcvdpE5JSUFKSgo/Xv8anNFohFDY/P2CFl3rFwj5S1Gw\nWvn7FmxVOVBRCggEgNTuvkULHqH1t3sQRqMRxcXFbfI6rCf5a1yA/8ZGcbmnzdyDUCqV0Gq1/LhW\nq23wctithhEKAUUwoAi23bcw6m2Xoqp1QHUVAAacRGpLFjI5GHGAr0MmhBC3eOU9CI1Gg8LCQhQV\nFcFisSAjIwPx8fHe2LRXMAIBmEA5GFUE0PFOoEMMEBoGcCxQWgz8cRXcH1fBlRSDM+hb5X0LQgjx\nNK+cQQiFQqSlpWHRokVgWRZJSUmIiYnB9u3bodFoEB8fj9zcXCxfvhw6nQ4nT57E//3f/2HlypUe\nicfCcjCbrWCtLBgGYGC7OV57q9l+mrsYhgEkUtsnVAXOYq67yV1ZZrsUJRSCC6y5yR0Y6LVHaAkh\n7uM4DlaWA8sBLFf3ba03zrJ141auYXmWA1jWyXK15dlG1svB6fYfuFsKpYefj/HaexCe0pL3IEr1\nFmirzS6tvzZx1CUNgAHDj6N2ut20unn1lgUHxmwGYzYBZiMYlkX8A/fjVMZxMBIpGIkEInEArGwj\nTZS7FDFqonF9BU2tt7xSBz0TgLDQUJSVlfGFGfvlmLot1u5v/XUz/HKMw3jtsH0MtYm54Tbs1lnz\n26pUSpRoS5zujOM6G99H+1/LWewNytebwTgZU6tVuFFcDI4DWA7gUFMBwFbhcDWVAgfUlOH4sixs\nw5xdhcChrgwHW0XD2i+Lmu3Ulq9d1m57tRWLIigI5RWVdWVhtx2H9dWbxtXFz3L1tgf7fWhivc7W\nUbO/InEAjEaj477U7KPjdmr2qZHh2nJOhznHf4P6vw+HunK1w6yf1pB/T9LgvuiWPXLvV/cgfOXw\n4cO4ceNGg+ksxwGo6w+i/r8/52QiVzMhVKlGn4GD+P/YQO0fGgeOrftjrJ1fuy6OX6EAYKRAgLRm\nvQz+FCoACwCLFYD+Zne7VWUXVmHdGerIqG0pvOk1MAAEjC2ZC5iaYTA10wABYztgEsBu2K58bdna\naQyAADEHq9VaM9++rK2cUFC3ToYRNCxXP4bagza7+BgnsTIMU7POmljrDSvkMhgM+pp4bcsJ+f1m\n+NjsxwUMA2G98cbK8eUFzqbXzms4PToiHGWlJY39E7WKNp0gGmP7g2Xg3rmT7chQHiBEh6DGbzi/\n8847iI6O5jsMWrFiBYRCITIyMlBeXg6z2YzZs+dg2IgR4DgODAPEhEjAWczgDAbAbLLd9AYHnU6H\nZ19+GeUVlbBYLHhpxgyk3H8/AOCLr7/Ghn9vBcCgW+fOWP7G6yjWavHau0uR/8cfAIA35s5BXK/e\nAACO4f832PaFaeRTb55QYsDsiFIEBilQbTIDApHtEplAyH9zQqHtCS+BoGZYBE4gsD3VVaM2adaN\n13zXm1Zbyv7fhmswzvHjcrkcOp3O6boaYx9J/e04G+GcT3ZSrm5EJpNDr692rHgaqUjrV3S1FZND\nBWZX4TlWtPUqY4FjBVe/DMMAaqUSZaWljmVqKkm+wrarnGpj4dcBz7yv1BafFvIkkdDzt5Db5SUm\nwHOPk/7yyy9YuHAhdu7cCcDW/tLWrVsRHByMoKAglJSUYOzYsTh69CgYhkGXLl0c3gmxj8tisUCv\n1zssd+TIEVzOzsZTTz+N/+7aCWVoGEpLSxAWEoJnX3gB/fr0wVNTp8JqMUOn0yFYIa85d2Zrz9UB\n1m64djo/zW4eAN2VywjctrZlPwYjAMQiQCgGRCJA5ORbLAaEddMYkbjJ+fWnBYeFoVKvt40LbcnL\nNs9u3Olw3bTWeHelPn+tVAD/jY3ick+becy1PYmNjUVxcTGuX78OrVaLkJAQRERE4PXXX8dPP/0E\nhmFw/fp13Lhxg397vDEcx2HJkiUOyxUXFyPj+HFbA30RtjfTlZFRAIBjP/6E9z9cY7uXASAktOWP\nEnM1SYMJVUNwTxxC5TKUFd8AzGbAYgYslppvs60tK0vD6XXDjtO4+vNMRtuNfIsZnNkMWGvm2Q9b\nnd+XaZWLXwKB82RSm0QaSzY18xn76TXflQoFWJPJNq3mbMtW3m5bAmFdkhLalbEvLxDUrNOxfKPr\nEgh83hoBaTsoQXjAmDFjsHfvXhQVFWHcuHHYtWsXtFot9u3bB7FYjIEDBzrtB6K+li7XGhiGsVVc\nARIwoWEQq9Vg5CHOy3ohHo5lbcmiNmnUJKqwIAVKi4tt06xWW8KpHbbaEgtnP81huCbx2JWFk7Kc\n1VozrWa6ydj0fIsF1azdulzZv9b8sZpKNkIRiiUSWDnOYZrjMoK6xFf7cUhOLk6r2TYjbDgNDaaJ\nYDHqwFVUOo+9JhlS8vMuShAeMG7cOMyePRslJSXYuXMndu/eDbVaDbFYjGPHjuHatWsuraeystLp\ncoMGDcL06dPxzDPP8F2HhoWF8X1APP3003w3o8HBwZ7cVa9hBAJAEADUe+FQpFaDCQxqellPBtYI\n+9N/jrXaJaKaZMLaDQauv1kAAAsxSURBVFtZu6TW+Dzbeiyur6uR8iKRCFZ9dcN1mE0O0/ik7LCu\nerG6wNXkp22+SF1Cc0g0zhKQqMl5TP1lGzvLE4qgCwoGa9DXlRMIHJZjhAK7xFgzbB+fs+H60+zG\n/SkJUoLwgG7dukGn0/ENFD788MOYOnUqkpOT0atXL3Tu3Nml9TS2XLdu3Zz269BYHxDEt5jaCuAm\nGwFurWojtBWvqduSVjOJxIVpnNWKILkMlWWlDRNgE8nOMTnahjln81xKfvXirOG8+y+736BVfkk7\njKAuSQmEdUmHP7uz/T0ZnngG6N6ntbfuGArdpPYv/hYX9QfRMv4aF+C/sflTXLX34GC1QBUWBm1R\nUV3CsT8jZJ2M1yaYesOc1cqvk59nnyibXa/jtJAxE1DZsVOL9o9uUhNCSAvV3oODUAhBoAyMXHHz\n62yFuOxJ1GpUejihUoLwAxcvXsSsWbMAoOb9DA4SiQR79uzxcWSEkPaszSWIW/GK2d13340DBw4A\n8L9LTLfi70kIaR1eac3VmwQCgV9VsLcyi8UCgQdeIiOE3Bra3BmEVCqFwWCA0Whs8nExiUTitXcK\n3OEvcXEcB4FAAKlU6utQCCE+0uYSBMMwCAwMbLacPz0xYc9f4yKEtD90/YAQQohTlCAIIYQ4RQmC\nEEKIU7f8m9SEEEI8o92eQfzjH//wdQhOUVzuobjc56+xUVzu8UZc7TZBEEIIaRolCEIIIU4JX3/9\n9dd9HYSvdOrUspYQPY3icg/F5T5/jY3ico+n46Kb1IQQQpyiS0yEEEKcogRBCCHEqTbXFpMrsrKy\nsHHjRrAsi+TkZKSmpvo6JHz00Uc4deoUQkJCsGLFCl+HwysuLsaaNWtQVlYGhmGQkpKCUaNG+Tos\nmEwmLFy4EBaLBVarFQkJCZg4caKvw+KxLIt//OMfUCqVfvOY5HPPPQepVAqBQAChUIglS5b4OiQA\ngE6nw8cff4z8/HwwDINnn30WXbt29WlMBQUFWLVqFT9eVFSEiRMnYvTo0T6MymbPnj04ePAgGIZB\nTEwMZs6ciYCAgOYXbAmunbFardzzzz/PXb9+nTObzdzf//53Lj8/39dhcefPn+euXLnCvfzyy74O\nxUFJSQl35coVjuM4rrq6mps1a5Zf/F4sy3J6vZ7jOI4zm83cvHnzuOzsbB9HVWf37t3ce++9xy1e\nvNjXofBmzpzJlZeX+zqMBlavXs2lp6dzHGf7t6yqqvJxRI6sViv31FNPcUVFRb4OhdNqtdzMmTM5\no9HIcRzHrVixgvv+++89tr12d4kpNzcXUVFRiIyMhEgkQmJiIjIzM30dFnr06AGF4ua7NWxtYWFh\n/JMSgYGBuO2221BSUuLjqGyt9tY2RW61WmG1Wpts3t2btFotTp06heTkZF+H4veqq6tx8eJFDB06\nFICtwyy5XO7jqBydO3cOUVFRCA8P93UoAGxnpyaTCVarFSaTCWFhYR7bVru7xFRSUgKVSsWPq1Qq\n5OTk+DCiW0dRURHy8vLQuXNnX4cCwPYfZe7cubh+/TpGjBiBLl26+DokAMCmTZswadIk6PV6X4fS\nwKJFiwAAw4YNQ0pKio+jsf1NBQcH46OPPsLVq1fRqVMnTJs2za/6ITl27BgGDRrk6zAAAEqlEmPH\njsWzzz6LgIAA9O7dG7179/bY9trdGQRpGYPBgBUrVmDatGmQyWS+DgeArffAZcuW4eOPP8aVK1fw\n+++/+zoknDx5EiEhIX753Pxbb72Fd999F/Pnz8e3336LCxcu+DokWK1W5OXlYfjw4Vi6dCkkEgm+\n/PJLX4fFs1gsOHnyJBISEnwdCgCgqqoKmZmZWLNmDdauXQuDwYDDhw97bHvtLkEolUpotVp+XKvV\nQqlU+jAi/2exWLBixQrcd999GDhwoK/DaUAul6Nnz57IysrydSjIzs7GiRMn8Nxzz+G9997DL7/8\ngg8++MDXYQEA/3ceEhKC/v37Izc318cR2c7gVSoVf/aXkJCAvLw8H0dV5/Tp0/j/9u4vpKk+juP4\nO5dJtGrm1NbSJiJBLCkbWGFQeJlkREmJF7KRRRcl0VhddaElkRcWDCwJugq6Cwqii7ESSgiSWBCW\ntRyyrcK0ucJjjnO62POcHuNE/x470r6vK0HxfM4QPzu/s9/3VFRUYLPZzI4CZJe7SkpKWLZsGQsX\nLqS2tpbnz5/P2fFyriAqKytJJpO8ffuWTCbDgwcP8Hg8ZseatzRNo7e3F6fTSUNDg9lxdJOTk3z8\n+BHIfqIpEongdDpNTgXNzc309vYSDAZpb2/H7XZz9OhRs2OhKIq+5KUoCpFIhPLycpNTgc1mo6io\niEQiAWT/Aa5evdrkVF/Mp+UlyD5xcnh4mOnpaTRN48mTJ3P6d59z9yAsFgter5czZ86gqio7duyg\nrKzM7Fj09PTw9OlT0uk0hw8fpqmpSb9xZ6Znz57R399PeXk5fr8fgAMHDlBTU2NqromJCYLBIKqq\nomkaW7ZsYdOmTaZmms9SqRTd3d1Adlmnrq6ODRs2mJwqy+v1cvHiRTKZDCUlJRw5csTsSMCXIm1r\nazM7iq6qqorNmzcTCASwWCy4XK45vZckozaEEEIYyrklJiGEED9GCkIIIYQhKQghhBCGpCCEEEIY\nkoIQQghhSApCiD+kqamJ169fmx1DiB+Wc/sghIDs6Ov379+Tl/flPdL27dvx+XwmpjJ2584d3r17\nR3NzM6dPn8br9bJmzRqzY4kcIAUhclYgEKC6utrsGN8VjUapqalBVVXi8fi82mks/m5SEEJ85e7d\nu4RCIVwuF/39/RQWFuLz+Vi/fj2QnQjc19fH0NAQVquVxsZGfTerqqrcuHGDcDhMKpXC4XDg9/ux\n2+0ARCIRzp49y+TkJHV1dfh8vu+OKY9Go+zdu5dEIkFxcTEWi2VuXwAh/iEFIYSB4eFhamtruXLl\nCg8fPqS7u5tgMIjVauXChQuUlZVx6dIlEokEHR0drFy5Erfbza1bt7h//z6nTp3C4XAQi8UoKCjQ\nf+/g4CBdXV1MTU0RCATweDyGIy9mZmY4ePAgmqahKAp+v59MJoOqqrS2trJr1y727NnzJ18SkYOk\nIETOOn/+/Kx34y0tLfqVwPLly9m5cycLFixg69at3Lx5k8HBQdatW8fQ0BAnT55k0aJFuFwu6uvr\nuXfvHm63m1AoREtLC6tWrQLA5XLNOubu3btZsmSJPoF2ZGTEsCDy8/O5evUqoVCI0dFRWltb6ezs\nZP/+/fPmeRzi7ycFIXKW3+//5j2IFStWzFr6KS4uZnx8nImJCaxWK4sXL9a/Z7fbefnyJZAdH19a\nWvrNY/53bHRBQQGKohj+XE9PD48fP2Z6epr8/HzC4TCKovDixQscDgddXV0/da5C/AopCCEMjI+P\no2maXhJjY2N4PB4KCwv58OEDU1NTekmMjY3pz1ooKirizZs3vz1Ku729HVVVaWtr4/Llyzx69IiB\ngYF5MTpc5A7ZByGEgVQqxe3bt8lkMgwMDBCPx9m4cSN2u521a9dy7do1Pn36RCwWIxwOs23bNgDq\n6+u5fv06yWQSTdOIxWKk0+lfyhCPxyktLSUvL49Xr15RWVn5f56iEN8lVxAiZ507d27WPojq6mr9\nmRdVVVUkk0l8Ph82m43jx4+zdOlSAI4dO0ZfXx+HDh3CarWyb98+famqoaGBmZkZOjs7SafTOJ1O\nTpw48Uv5otEoFRUV+teNjY2/c7pC/DR5HoQQX/n3Y64dHR1mRxHCVLLEJIQQwpAUhBBCCEOyxCSE\nEMKQXEEIIYQwJAUhhBDCkBSEEEIIQ1IQQgghDElBCCGEMPQZHkl16R+eUJMAAAAASUVORK5CYII=\n",
-            "text/plain": [
-              "<Figure size 432x288 with 1 Axes>"
-            ]
-          },
-          "metadata": {
-            "tags": []
-          }
-        }
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "ftRKPT22WenY",
-        "colab_type": "code",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 51
-        },
-        "outputId": "060ab133-ec5b-4d3e-fcc7-6a50249871f7"
-      },
-      "source": [
-        "(loss, categorical_accuracy) = get_metrics(cnn_model, (test_features, y_test_binarized))\n",
-        "print(loss)\n",
-        "print(categorical_accuracy)"
-      ],
-      "execution_count": 26,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "text": [
-            "loss: 0.08132119951316726\n",
-            "categorical_accuracy: 0.6758947968482971\n"
-          ],
-          "name": "stdout"
-        }
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "id": "ywq6qDOSp8Ma",
-        "colab_type": "text"
-      },
-      "source": [
-        "## Inference"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "hQM2-wVMiW1f",
-        "colab_type": "code",
-        "colab": {}
-      },
-      "source": [
-        "def generate_predictions(model:tf.keras.models.Sequential, article_title: str) -> list:\n",
-        "    labels = []\n",
-        "    \n",
-        "    title = np.array([article_title])\n",
-        "    cleaned_title = clean_title(title)\n",
-        "    tokenized = get_features(cleaned_title)\n",
-        "    \n",
-        "    probabilities = model.predict(tokenized)\n",
-        "    \n",
-        "    probabilities = probabilities.reshape(32,)\n",
-        "    idxs = np.argsort(probabilities)[::-1][:2]\n",
-        "    \n",
-        "    for (i, j) in enumerate(idxs):\n",
-        "        label = \"{}: {:.2f}%\".format(mlb.classes_[j], probabilities[j] * 100)\n",
-        "        labels.append(label)\n",
-        "        \n",
-        "    return (labels)"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "s91BjN3Din2F",
-        "colab_type": "code",
-        "outputId": "6cb367cb-2f5f-4905-bdc2-cd541ad45f7b",
-        "colab": {
-          "base_uri": "https://localhost:8080/",
-          "height": 34
-        }
-      },
-      "source": [
-        "print(generate_predictions(cnn_model, 'Towards Wide Learning: Experiments in Healthcare'))"
-      ],
-      "execution_count": 29,
-      "outputs": [
-        {
-          "output_type": "stream",
-          "text": [
-            "['cs.LG: 95.10%', 'cs.AI: 55.58%']\n"
-          ],
-          "name": "stdout"
-        }
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "id": "2xKaveHZplPQ",
-        "colab_type": "text"
-      },
-      "source": [
-        "## Verification\n",
-        "\n",
-        "The paper **Towards Wide Learning: Experiments in Healthcare** can be found here: https://arxiv.org/abs/1612.05730. Here are the subjects to which it got tagged:\n",
-        "\n",
-        "![](https://i.ibb.co/ZLqPr2j/Screen-Shot-2019-09-27-at-12-58-16-PM.png)"
-      ]
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "id": "IJtjZ_z1p-7K",
-        "colab_type": "text"
-      },
-      "source": [
-        "## Visualization of the embeddings"
-      ]
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "HFaI9-UlsEtk",
-        "colab_type": "code",
-        "colab": {}
-      },
-      "source": [
-        "word_index = tokenizer.word_index\n",
-        "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "Qllo5dfMQsVH",
-        "colab_type": "code",
-        "colab": {}
-      },
-      "source": [
-        "def serialize_embeddings(model:tf.keras.models.Sequential) -> str:\n",
-        "    # Get the weights of the first layer (Embedding layer)\n",
-        "    e = model.layers[0]\n",
-        "    weights = e.get_weights()[0]\n",
-        "    # Serialize the weights in .tsv format\n",
-        "    out_v = io.open('vecs.tsv', 'w', encoding='utf-8')\n",
-        "    out_m = io.open('meta.tsv', 'w', encoding='utf-8')\n",
-        "    for word_num in range(1, config.max_words):\n",
-        "        word = reverse_word_index[word_num]\n",
-        "        embeddings = weights[word_num]\n",
-        "        out_m.write(word + \"\\n\")\n",
-        "        out_v.write('\\t'.join([str(x) for x in embeddings]) + \"\\n\")\n",
-        "    out_v.close()\n",
-        "    out_m.close()\n",
-        "    return 'Embeddings have been serialized'"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "code",
-      "metadata": {
-        "id": "sjoiy2bdtXiK",
-        "colab_type": "code",
-        "colab": {}
-      },
-      "source": [
-        "print(serialize_embeddings(cnn_model))"
-      ],
-      "execution_count": 0,
-      "outputs": []
-    },
-    {
-      "cell_type": "markdown",
-      "metadata": {
-        "id": "uMrfYpV-ygsu",
-        "colab_type": "text"
-      },
-      "source": [
-        "Here's a screencast of the projection of the Embedding matrix: https://www.loom.com/share/88eaf892c02a4ba392b00ff376686e0d"
-      ]
-    }
-  ]
-}
\ No newline at end of file
